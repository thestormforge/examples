apiVersion: redskyops.dev/v1alpha1
kind: Experiment
metadata:
  name: voting-app-example
spec:
  optimization:
  - name: "experimentBudget"
    value: "100"
  parameters:
  - name: worker_cpu
    min: 100
    max: 1000
    baseline: 1000
  - name: voting_memory
    min: 200
    max: 2000
    baseline: 2000
  - name: voting_cpu
    min: 100
    max: 1000
    baseline: 1000
  - name: voting_replicas
    min: 1
    max: 4
    baseline: 3
  - name: db_memory
    min: 200
    max: 2000
    baseline: 2000
  metrics:
  - name: throughput
    minimize: false
    type: jsonpath
    query: '{.total}'
    path: '/metrics'
    port: 5000
    selector:
      matchLabels:
        component: result-exporter
  - name: cost
    minimize: true
    type: pods
    # Note that these cost weights are specific to GKE and represent $22/month/cpu and $3/month/GB
    query: '{{resourceRequests .Pods "cpu=0.022,memory=0.000000000003"}}'
    selector:
      matchLabels:
        app: voting-app
  patches:
  - targetRef:
      kind: Deployment
      apiVersion: apps/v1
      name: worker
    patch: |
      spec:
        template:
          spec:
            containers:
            - name: worker
              resources:
                limits:
                  cpu: "{{ .Values.worker_cpu }}m"
                requests:
                  cpu: "{{ .Values.worker_cpu }}m"
  - targetRef:
      kind: Deployment
      apiVersion: apps/v1
      name: voting-service
    patch: |
      spec:
        replicas: {{ .Values.voting_replicas }}
        template:
          spec:
            containers:
            - name: voting-service
              resources:
                limits:
                  cpu: "{{ .Values.voting_cpu }}m"
                  memory: "{{ .Values.voting_memory }}Mi"
                requests:
                  cpu: "{{ .Values.voting_cpu }}m"
                  memory: "{{ .Values.voting_memory }}Mi"
  - targetRef:
      kind: Deployment
      apiVersion: apps/v1
      name: db
    patch: |
      spec:
        template:
          spec:
            containers:
            - name: db
              resources:
                limits:
                  memory: "{{ .Values.db_memory }}Mi"
                requests:
                  memory: "{{ .Values.db_memory }}Mi"
  template: # trial
    spec:
      template: # job
        spec:
          template: # pod
            spec:
              containers:
              - name: locust
                image: grubykarol/locust:0.12.0-python3.7-alpine3.10
                command: ["/usr/local/bin/locust"]
                args: ["--locustfile=/locust-tasks/locustfile.py",
                       "--no-web",
                       "--host=http://voting-service",
                       "--clients=200",
                       "--hatch-rate=20",
                       "--run-time=300",
                       "--exit-code-on-error=0"]
                volumeMounts:
                - name: locust
                  mountPath: /locust-tasks/locustfile.py
                  subPath: locustfile.py
              volumes:
              - name: locust
                configMap:
                  name: locust
