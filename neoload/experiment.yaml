apiVersion: optimize.stormforge.io/v1beta2
kind: Experiment
metadata:
  name: neoload-UUID
  namespace: default
spec:
  optimization:
  - name: "experimentBudget"
    value: "BUDGET"
  parameters:
  - name: deployment/db/db/resources/cpu
    baseline: 1000
    min: 500
    max: 2000
  - name: deployment/db/db/resources/memory
    baseline: 2000
    min: 1000
    max: 4000
  - name: deployment/redis/redis/resources/cpu
    baseline: 1000
    min: 500
    max: 2000
  - name: deployment/redis/redis/resources/memory
    baseline: 2000
    min: 1000
    max: 4000
  - name: deployment/result-service/result-service/resources/cpu
    baseline: 1000
    min: 500
    max: 2000
  - name: deployment/result-service/result-service/resources/memory
    baseline: 2000
    min: 1000
    max: 4000
  - name: deployment/voting-service/voting-service/resources/cpu
    baseline: 1000
    min: 500
    max: 2000
  - name: deployment/voting-service/voting-service/resources/memory
    baseline: 2000
    min: 1000
    max: 4000
  - name: deployment/worker/worker/resources/cpu
    baseline: 1000
    min: 500
    max: 2000
  - name: deployment/worker/worker/resources/memory
    baseline: 2000
    min: 1000
    max: 4000
  metrics:
  - name: p95-latency
    type: prometheus
    minimize: true
    query: scalar(p95{job="trialRun",instance="{{ .Trial.Name }}"})
  - name: p99-latency
    type: prometheus
    minimize: true
    query: scalar(p99{job="trialRun",instance="{{ .Trial.Name }}"})
  - name: cost
    type: prometheus
    minimize: true
    query: ({{ cpuRequests . "" }} * 17) + ({{ memoryRequests . "" | GB }} * 3)
  - name: cost-cpu-requests
    type: prometheus
    minimize: true
    optimize: false
    query: '{{ cpuRequests . "" }}'
  - name: cost-memory-requests
    type: prometheus
    minimize: true
    optimize: false
    query: '{{ memoryRequests . "" | GB }}'
  patches:
  - targetRef:
      name: db
      namespace: default
      apiVersion: apps/v1
      kind: Deployment
    patch: |
      spec:
        template:
          spec:
            containers:
            - name: db
              resources:
                limits:
                  cpu: '{{ index .Values "deployment/db/db/resources/cpu" }}m'
                  memory: '{{ index .Values "deployment/db/db/resources/memory" }}Mi'
                requests:
                  cpu: '{{ index .Values "deployment/db/db/resources/cpu" }}m'
                  memory: '{{ index .Values "deployment/db/db/resources/memory" }}Mi'
  - targetRef:
      name: redis
      namespace: default
      apiVersion: apps/v1
      kind: Deployment
    patch: |
      spec:
        template:
          spec:
            containers:
            - name: redis
              resources:
                limits:
                  cpu: '{{ index .Values "deployment/redis/redis/resources/cpu" }}m'
                  memory: '{{ index .Values "deployment/redis/redis/resources/memory" }}Mi'
                requests:
                  cpu: '{{ index .Values "deployment/redis/redis/resources/cpu" }}m'
                  memory: '{{ index .Values "deployment/redis/redis/resources/memory" }}Mi'
  - targetRef:
      name: result-service
      namespace: default
      apiVersion: apps/v1
      kind: Deployment
    patch: |
      spec:
        template:
          spec:
            containers:
            - name: result-service
              resources:
                limits:
                  cpu: '{{ index .Values "deployment/result-service/result-service/resources/cpu"
                    }}m'
                  memory: '{{ index .Values "deployment/result-service/result-service/resources/memory"
                    }}Mi'
                requests:
                  cpu: '{{ index .Values "deployment/result-service/result-service/resources/cpu"
                    }}m'
                  memory: '{{ index .Values "deployment/result-service/result-service/resources/memory"
                    }}Mi'
  - targetRef:
      name: voting-service
      namespace: default
      apiVersion: apps/v1
      kind: Deployment
    patch: |
      spec:
        template:
          spec:
            containers:
            - name: voting-service
              resources:
                limits:
                  cpu: '{{ index .Values "deployment/voting-service/voting-service/resources/cpu"
                    }}m'
                  memory: '{{ index .Values "deployment/voting-service/voting-service/resources/memory"
                    }}Mi'
                requests:
                  cpu: '{{ index .Values "deployment/voting-service/voting-service/resources/cpu"
                    }}m'
                  memory: '{{ index .Values "deployment/voting-service/voting-service/resources/memory"
                    }}Mi'
  - targetRef:
      name: worker
      namespace: default
      apiVersion: apps/v1
      kind: Deployment
    patch: |
      spec:
        template:
          spec:
            containers:
            - name: worker
              resources:
                limits:
                  cpu: '{{ index .Values "deployment/worker/worker/resources/cpu" }}m'
                  memory: '{{ index .Values "deployment/worker/worker/resources/memory"
                    }}Mi'
                requests:
                  cpu: '{{ index .Values "deployment/worker/worker/resources/cpu" }}m'
                  memory: '{{ index .Values "deployment/worker/worker/resources/memory"
                    }}Mi'
  trialTemplate:
    spec:
      setupTasks:
      - name: monitoring
        helmChart: oci://registry.stormforge.io/optimize-pro/prometheus
      jobTemplate:
        spec:
          template:
            spec:
              containers:
                - name: neoload
                  image: 516273174544.dkr.ecr.us-east-2.amazonaws.com/neoload:latest
                  env:
                  - name: TEST_NAME
                    valueFrom:
                      fieldRef:
                        fieldPath: metadata.name
                  - name: LGS
                    value: "5"
                  - name: TEST_FILE
                    value: /forge-init.d/neoload-stormforge.yaml
                  - name: NEOLOAD_TOKEN
                    valueFrom:
                      secretKeyRef:
                        name: neoload-token
                        key: token
                  volumeMounts:
                  - name: test-case-file
                    readOnly: true
                    mountPath: /forge-init.d
              volumes:
                - name: test-case-file
                  configMap:
                    name: default-neoload
#
# End Experiment - NOTE: this marker required by run-experiment.sh
#
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: default-neoload
  namespace: default
data:
  neoload-stormforge.yaml: |
    name: Stormforge Perf Test
    user_paths:
    - name: sf-path
      actions:
        steps:
          - transaction:
              name: Transaction1
              description: dog vs cat
              steps:
              - request:
                  url: http://TARGET_SERVER/
              - request:
                  url: /
                  server: TARGET_SERVER
                  method: POST
                  headers:
                  - Content-Type: application/x-www-form-urlencoded
                  body: 'vote=a'
              - request:
                  url: /
                  server: TARGET_SERVER
                  method: POST
                  headers:
                  - Content-Type: application/x-www-form-urlencoded
                  body: 'vote=b'

    populations:
    - name: pop1
      user_paths:
      - name: sf-path

    scenarios:
    - name: StormForgeScenario
      populations:
      - name: pop1
        rampup_load:
          min_users: 1
          max_users: 50
          increment_users: 2
          increment_every: 1s
          duration: 5m
---
apiVersion: v1
kind: Secret
metadata:
  name: neoload-token
  namespace: default
data:
  token: XXX-XXX-XXX-XXX
